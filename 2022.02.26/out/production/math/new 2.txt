import javax.swing.*;

import java.awt.*;

import java.awt.event.*;

public class lianliankan implements ActionListener

{undefined

JFrame mainFrame; //主面板

Container thisContainer;

JPanel centerPanel,southPanel,northPanel; //子面板

JButton diamondsButton[][] = new JButton[6][5];//游戏按钮数组

JButton exitButton,resetButton,newlyButton; //退出，重列，重新开始按钮

JLabel fractionLable=new JLabel("0"); //分数标签

JButton firstButton,secondButton; //分别记录两次62616964757a686964616fe59b9ee7ad9431333335326239被选中的按钮

int grid[][] = new int[8][7];//储存游戏按钮位置

static boolean pressInformation=false; //判断是否有按钮被选中

int x0=0,y0=0,x=0,y=0,fristMsg=0,secondMsg=0,validateLV; //游戏按钮的位置坐标

int i,j,k,n;//消除方法控制

public void init(){undefined

mainFrame=new JFrame("JKJ连连看");

thisContainer = mainFrame.getContentPane();

thisContainer.setLayout(new BorderLayout());

centerPanel=new JPanel();

southPanel=new JPanel();

northPanel=new JPanel();

thisContainer.add(centerPanel,"Center");

thisContainer.add(southPanel,"South");

thisContainer.add(northPanel,"North");

centerPanel.setLayout(new GridLayout(6,5));

for(int cols = 0;cols < 6;cols++){undefined

for(int rows = 0;rows < 5;rows++ ){undefined

diamondsButton[cols][rows]=new JButton(String.valueOf(grid[cols+1][rows+1]));

diamondsButton[cols][rows].addActionListener(this);

centerPanel.add(diamondsButton[cols][rows]);

}

}

exitButton=new JButton("退出");

exitButton.addActionListener(this);

resetButton=new JButton("重列");

resetButton.addActionListener(this);

newlyButton=new JButton("再来一局");

newlyButton.addActionListener(this);

southPanel.add(exitButton);

southPanel.add(resetButton);

southPanel.add(newlyButton);

fractionLable.setText(String.valueOf(Integer.parseInt(fractionLable.getText())));

northPanel.add(fractionLable);

mainFrame.setBounds(280,100,500,450);

mainFrame.setVisible(true);

}

public void randomBuild() {undefined

int randoms,cols,rows;

for(int twins=1;twins<=15;twins++) {undefined

randoms=(int)(Math.random()*25+1);

for(int alike=1;alike<=2;alike++) {undefined

cols=(int)(Math.random()*6+1);

rows=(int)(Math.random()*5+1);

while(grid[cols][rows]!=0) {undefined

cols=(int)(Math.random()*6+1);

rows=(int)(Math.random()*5+1);

}

this.grid[cols][rows]=randoms;

}

}

}

public void fraction(){undefined

fractionLable.setText(String.valueOf(Integer.parseInt(fractionLable.getText())+100));

}

public void reload() {undefined

int save[] = new int[30];

int n=0,cols,rows;

int grid[][]= new int[8][7];

for(int i=0;i<=6;i++) {undefined

for(int j=0;j<=5;j++) {undefined

if(this.grid[i][j]!=0) {undefined

save[n]=this.grid[i][j];

n++;

}

}

}

n=n-1;

this.grid=grid;

while(n>=0) {undefined

cols=(int)(Math.random()*6+1);

rows=(int)(Math.random()*5+1);

while(grid[cols][rows]!=0) {undefined

cols=(int)(Math.random()*6+1);

rows=(int)(Math.random()*5+1);

}

this.grid[cols][rows]=save[n];

n--;

}

mainFrame.setVisible(false);

pressInformation=false; //这里一定要将按钮点击信息归为初始

init();

for(int i = 0;i < 6;i++){undefined

for(int j = 0;j < 5;j++ ){undefined

if(grid[i+1][j+1]==0)

diamondsButton[i][j].setVisible(false);

}

}

}

public void estimateEven(int placeX,int placeY,JButton bz) {undefined

if(pressInformation==false) {undefined

x=placeX;

y=placeY;

secondMsg=grid[x][y];

secondButton=bz;

pressInformation=true;

}

else {undefined

x0=x;

y0=y;

fristMsg=secondMsg;

firstButton=secondButton;

x=placeX;

y=placeY;

secondMsg=grid[x][y];

secondButton=bz;

if(fristMsg==secondMsg && secondButton!=firstButton){undefined

xiao();

}

}

}

public void xiao() { //相同的情况下能不能消去。仔细分析，不一条条注释

if((x0==x &&(y0==y+1||y0==y-1)) || ((x0==x+1||x0==x-1)&&(y0==y))){ //判断是否相邻

remove();

}

else{undefined

for (j=0;j<7;j++ ) {undefined

if (grid[x0][j]==0){ //判断第一个按钮同行哪个按钮为空

if (y>j) { //如果第二个按钮的Y坐标大于空按钮的Y坐标说明第一按钮在第二按钮左边

for (i=y-1;i>=j;i-- ){ //判断第二按钮左侧直到第一按钮中间有没有按钮

if (grid[x][i]!=0) {undefined

k=0;

break;

}

else{ k=1; } //K=1说明通过了第一次验证

}

if (k==1) {undefined

linePassOne();

}

}

if (y

for (i=y+1;i<=j ;i++ ){ //判断第二按钮左侧直到第一按钮中间有没有按钮

if (grid[x][i]!=0){undefined

k=0;

break;

}

else { k=1; }

}

if (k==1){undefined

linePassOne();

}

}

if (y==j ) {undefined

linePassOne();

}

}

if (k==2) {undefined

if (x0==x) {undefined

remove();

}

if (x0

for (n=x0;n<=x-1;n++ ) {undefined

if (grid[n][j]!=0) {undefined

k=0;

break;

}

if(grid[n][j]==0 && n==x-1) {undefined

remove();

}

}

}

if (x0>x) {undefined

for (n=x0;n>=x+1 ;n-- ) {undefined

if (grid[n][j]!=0) {undefined

k=0;

break;

}

if(grid[n][j]==0 && n==x+1) {undefined

remove();

}

}

}

}

}

for (i=0;i<8;i++ ) { //列

if (grid[i][y0]==0) {undefined

if (x>i) {undefined

for (j=x-1;j>=i ;j-- ) {undefined

if (grid[j][y]!=0) {undefined

k=0;

break;

}

else { k=1; }

}

if (k==1) {undefined

rowPassOne();

}

}

if (x

for (j=x+1;j<=i;j++ ) {undefined

if (grid[j][y]!=0) {undefined

k=0;

break;

}

else { k=1; }

}

if (k==1) {undefined

rowPassOne();

}

}

if (x==i) {undefined

rowPassOne();

}

}

if (k==2){undefined

if (y0==y) {undefined

remove();

}

if (y0

for (n=y0;n<=y-1 ;n++ ) {undefined

if (grid[i][n]!=0) {undefined

k=0;

break;

}

if(grid[i][n]==0 && n==y-1) {undefined

remove();

}

}

}

if (y0>y) {undefined

for (n=y0;n>=y+1 ;n--) {undefined

if (grid[i][n]!=0) {undefined

k=0;

break;

}

if(grid[i][n]==0 && n==y+1) {undefined

remove();

}

}

}

}

}

}

}

public void linePassOne(){undefined

if (y0>j){ //第一按钮同行空按钮在左边

for (i=y0-1;i>=j ;i-- ){ //判断第一按钮同左侧空按钮之间有没按钮

if (grid[x0][i]!=0) {undefined

k=0;

break;

}

else { k=2; } //K=2说明通过了第二次验证

}

}

if (y0

for (i=y0+1;i<=j ;i++){undefined

if (grid[x0][i]!=0) {undefined

k=0;

break;

}

else{ k=2; }

}

}

}

public void rowPassOne(){undefined

if (x0>i) {undefined

for (j=x0-1;j>=i ;j-- ) {undefined

if (grid[j][y0]!=0) {undefined

k=0;

break;

}

else { k=2; }

}

}

if (x0

for (j=x0+1;j<=i ;j++ ) {undefined

if (grid[j][y0]!=0) {undefined

k=0;

break;

}

else { k=2; }

}

}

}

public void remove(){undefined

firstButton.setVisible(false);

secondButton.setVisible(false);

fraction();

pressInformation=false;

k=0;

grid[x0][y0]=0;

grid[x][y]=0;

}

public void actionPerformed(ActionEvent e) {undefined

if(e.getSource()==newlyButton){undefined

int grid[][] = new int[8][7];

this.grid = grid;

randomBuild();

mainFrame.setVisible(false);

pressInformation=false;

init();

}

if(e.getSource()==exitButton)

System.exit(0);

if(e.getSource()==resetButton)

reload();

for(int cols = 0;cols < 6;cols++){undefined

for(int rows = 0;rows < 5;rows++ ){undefined

if(e.getSource()==diamondsButton[cols][rows])

estimateEven(cols+1,rows+1,diamondsButton[cols][rows]);

}

}

}

public static void main(String[] args) {undefined

lianliankan llk = new lianliankan();

llk.randomBuild();

llk.init();

}

}
————————————————
版权声明：本文为CSDN博主「薰子」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_28894541/article/details/114040646